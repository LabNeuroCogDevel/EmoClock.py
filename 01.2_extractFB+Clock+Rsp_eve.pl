#!/usr/bin/env perl
###
#  extract ITI, Clock, RT, and Feedback as individual EVE files
#    from eve generated by timing.py
# 
#  WARNING: RT is actually ISI onset -- this is what we have in the eve
#
# this could be done with a bash script wrapping find and grep
###
use strict; use warnings; 
use feature qw/state say/;
use File::Find::Rule;
use File::Basename;
my $scriptdir=dirname($0);

my $DOWNSAMPLE=4;


# from MEGClockTask/private/defineTrigger.m 
#   trigger.ITI= 10;
#    trigger.ISI= 15;
#    %face 25-130
#    % score 135 - 235 -- face+107
sub tofile{
   my $code = shift;
   my $file;
   if($code==10){
    $file='ITI';
   } elsif($code==15) {
    $file='RT'; # not really, but lets pretend
   } elsif($code>=25 && $code<=130) {
    $file='clock';
   } elsif($code>=135 && $code<=235) {
    $file='feedback';
   } elsif($code==0) {
    $file='';
   } else {
    print "$.: $code is unknown!";
    my $file = "UNKNOWN";
   }
}


#my @files = File::Find::Rule->file()->name('MEG_[0-9]+_[0-9]+_tc_[0-9].eve')->in($scriptdir);
my @files = File::Find::Rule->file()->name(qr/MEG_[0-9]{5}_[0-9]{8}_tc_[0-9].eve/)->in("$scriptdir/subjs");

# for each file, make 4 new files
for my $file (@files) {
  my ($bn,$dn,$s) = fileparse($file, '.eve');


  # get ride of the tc name part, initialze a start
  $bn =~ s/_tc//;
  my $start=join(" ",(0)x4)."\n";


  # do we already have the files we want?
  my @alreadyHave = File::Find::Rule->file()->name(qr/${bn}_(ITI|RT|clock|feedback)_ds$DOWNSAMPLE.eve/)->in($dn);
  if($#alreadyHave>=3){
    say "$bn: have $#alreadyHave parsed eves";
    next;
  }


  say $bn;

  my %filehandles;
  # open the file
  open my $readfile,'<', $file;
  while(<$readfile>) { 

   # lines are like: 3908 3.908 0 110

   # skip if we dont have an ending digit
   next unless m/(\d+)$/;

   # if the digit is zero, use this as the starting line
   $start=$_ && next if $1 == 0;
   # what file (type) does this line belong to?
   my $t=tofile($1);
   # the actual output name
   my $fn = "$dn/${bn}_".$t."_ds$DOWNSAMPLE.eve";

   # if we haven't seen this file yet
   if(!  $filehandles{$t}){
     open $filehandles{$t},'>',$fn or die 'cannot open $fn';
     say "\t$fn";
     # write start to this file
     print  {$filehandles{$t} } $start;
   }

   # write the actual line
   my @F=split /\s+/;
   $F[0]=sprintf('%d',$F[0]/$DOWNSAMPLE);
   say { $filehandles{$t} } join(" ",@F);
  }
}

